stages:
    - services
    - build
    - test
    - deploy

# NGINX PROXY

start_nginx:
    stage: services
    script:
        - docker-compose -f docker-compose.ci.yml up -d nginx-proxy

# POSTGRES DATABASE

start_database:
    stage: services
    script:
        - docker-compose -f docker-compose.ci.yml up -d postgres-db

# RABBITMQ MESSAGE BROKER

start_rabbitmq:
    stage: services
    script:
        - docker-compose -f docker-compose.ci.yml up -d rabbitmq

# FASTAPI SERVER

build_server:
    stage: build
    script:
        - docker-compose -f docker-compose.ci.yml stop fastapi-server
        - docker-compose -f docker-compose.ci.yml build fastapi-server
    rules:
        - changes:
            - docker-compose.ci.yml
            - odk-api/**/*

integration_test_server:
    stage: test
    script:
        - docker-compose -f docker-compose.ci.yml run --rm fastapi-server bash run_db_connection_test.sh
    rules:
        - changes:
            - docker-compose.ci.yml
            - odk-api/**/*


deploy_server:
    stage: deploy
    script:
        - docker-compose -f docker-compose.ci.yml up -d --no-deps fastapi-server
    rules:
        - changes:
            - docker-compose.ci.yml
            - odk-api/**/*

# VUE PWA

build_app:
    stage: build
    script:
        - docker-compose -f docker-compose.ci.yml stop vue-pwa
        - docker-compose -f docker-compose.ci.yml build vue-pwa
    rules:
        - changes:
            - docker-compose.ci.yml
            - odk-app/**/*

test_app:
    stage: test
    script:
        - echo "NOT YET IMPLEMENTED"
    rules:
        - changes:
            - docker-compose.ci.yml
            - odk-app/**/*


deploy_app:
    stage: deploy
    script:
        - docker-compose -f docker-compose.ci.yml up -d --no-deps vue-pwa
    rules:
        - changes:
            - docker-compose.ci.yml
            - odk-app/**/*
